AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Namespace:
    Description: Prefix for all resources generated by the pipeline
    Type: String

Resources:
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Ref Namespace
      LifecyclePolicy:
        LifecyclePolicyText: '{ "rules": [{"rulePriority": 1, "description": "keep only the last 5 pushed images", "selection": { "tagStatus": "any", "countType": "imageCountMoreThan", "countNumber": 5}, "action": { "type": "expire" }}]}'
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCrossAccountPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
                {%- for environment in environments %}
                - !Sub arn:${AWS::Partition}:iam::{{ environment.id }}:root
                {%- endfor %}
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage

  PipelineDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${Namespace}-pipeline
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "log",
              "width": 24,
              "height": 6,
              "properties": {
                "region": "${AWS::Region}",
                "accountId": "${AWS::AccountId}",
                "title": "ConfigureTemplates",
                "query": "SOURCE '/aws/codebuild/${Namespace}-config-templates' | fields @message",
                "view": "table"
              }
            },
            {
              "type": "log",
              "width": 24,
              "height": 6,
              "properties": {
                "region": "${AWS::Region}",
                "accountId": "${AWS::AccountId}",
                "title": "PackageToolsStacks",
                "query": "SOURCE '/aws/codebuild/${Namespace}-build-package-tools' | fields @message",
                "view": "table"
              }
            },
            {
              "type": "log",
              "width": 24,
              "height": 6,
              "properties": {
                "region": "${AWS::Region}",
                "accountId": "${AWS::AccountId}",
                "title": "AppBuildTest",
                "query": "SOURCE '/aws/codebuild/${Namespace}-build-appbuild' | fields @message",
                "view": "table"
              }
            },
            {
              "type": "log",
              "width": 24,
              "height": 6,
              "properties": {
                "region": "${AWS::Region}",
                "accountId": "${AWS::AccountId}",
                "title": "PackageEnvStacks",
                "query": "SOURCE '/aws/codebuild/${Namespace}-build-package-envs' | fields @message",
                "view": "table"
              }
            },
            {
              "type": "log",
              "width": 24,
              "height": 6,
              "properties": {
                "region": "${AWS::Region}",
                "accountId": "${AWS::AccountId}",
                "title": "ImageBuild",
                "query": "SOURCE '/aws/codebuild/${Namespace}-image-build' | fields @message",
                "view": "table"
              }
            }{%- if environments -%},{%- endif -%}
            {%- for environment in environments -%}
            {
              "type": "log",
              "width": 24,
              "height": 6,
              "properties": {
                "region": "{{ environment.region }}",
                "accountId": "{{ environment.id }}",
                "title": "{{ environment.name }} Test",
                "query": "SOURCE '/aws/codebuild/{{ environment.namespace }}-test' | fields @message",
                "view": "table"
              }
            }{%- if not loop.last -%},{%- endif -%}
            {%- endfor -%}
          ]
        }

  ServiceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${Namespace}-service
      DashboardBody: |
        {
          "widgets": [
            {%- for environment in environments -%}
            {
              "type": "log",
              "width": 24,
              "height": 6,
              "properties": {
                "region": "{{ environment.region }}",
                "accountId": "{{ environment.id }}",
                "title": "{{ environment.name }}",
                "query": "SOURCE '{{ environment.namespace }}-service' | fields @message",
                "view": "table"
              }
            }{%- if not loop.last -%},{%- endif -%}
            {%- endfor -%}
          ]
        }
